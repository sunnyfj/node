
get & post 请求

请求头 最大不能超过32k  请求content 最大不能超过 1G  get数据时候放在请求头 而post 是放在请求身

之所以 POST数据比GET大的多

data 分段接收
end  全部到达



比较常用的：（*7）
	crypto 加密 密码进过MD5等很多加密方式

	Events 事件

	net 网络操作

	os  各种操作系统信息

	path 处理文件路径用的

	stream 流操作 高效的分段读取发送

	timers 定时器

	ZLIB 压缩



nodejs docs 简介
	assertion Testing  断言：做测试

	buffer node的一部分

	c++ Addons  c++的扩展

	child processes 子进程

	cluster 进程 性能的多进程处理

	crypto 加密 密码进过MD5等很多加密方式

	debugger 调试模块

	dns  域名解析 getServer()

	domain  域  废弃了

	Events 事件

	file system  fs

	modules  帮助node的实现模块化

	net 网络操作

	os  各种操作系统信息

	path 处理文件路径用的

	process 进程相关的信息

	punycode 废弃了

	readline 读取js

	pepl nodejs命令行

	stream 流操作 高效的分段读取发送

	timers 定时器

	TLS/SSl 加密

	TTY

	UDP 数据传送

	util 工具

	v8 获取各种信息

	vm 虚拟机

	ZLIB 压缩



require:
	引入自己的模块  ./ ？ 不加./ 模块必须放在node_modules下

	1.如果有 ./
		从当前的模块找
	2.如果没有 ./
		先从系统模块找
		再从node_modules找

自定义模块可以放在node_modules下


exports:  单独输出
	导出

module.exports  批量输出

没有全局变量 默认回增加以下代码
	(function (require, exports, module){})()

.js 是可选


npm : Nodejs Package Manager (NodeJS包管理器)

1.统一下载路径
2.自动下载依赖

npm init
npm publish 发布自己的模块
npm unpublish 删除



express框架 （本身功能并不操作主要依赖中间件）  保留了原生的功能 添加了方法（send）增强原有的功能 （非破坏式的）

1、安装
2、配置
3、接收请求
4、响应

res.send() : 参数可以为json类型

使用：
	1、创建服务  var server = express()
	2、监听  	  var server.listen(8080)
	3、处理请求  server.use('地址', (req,res) => {})

3种方法：
	.get('/', (req, res) => {})
	.post('/', (req, res) => {})
	.use('/', (req, res) => {})

中间件（插件）




GET  无需中间件
req.query

POST 需要 body-parser
server.use(bodyParser.urlencoded({}))

server.use((req,res) => {
	req.body
})


extended：true/false （扩展模式）
limit:2*1024         (限制)



链式操作

	server.use((req, res, next) => {})
	server.use('/', (req, res, next) => {})
	server.use((req, res, next) => {})

	next 下一个步骤
	next()
	类似有错的话就抛出错误  否则 执行next()
	if(有错){
		res.emit('error')
	}else{
		next()
	}

---------------------------------------------------------------------
cookie、 session ：


http 无状态的

cookie 、session

cookie：在浏览器保存一些数据  每次向服务器发送请求都会带过来

	*不安全 有限（4k）

session: 保存数据，保存在服务端

	*安全的 无限
---------------------------------------------------------------------


session： 不可能独立存在  基于cookie实现的  存在服务器的

第一次浏览器访问服务器时 cookie 是空的  然后服务器植入 session_id  然后下次访问的
时候根据id找到session的文件、读取、写入

隐患： session劫持
理论上没有完全避免的方法 只有缓解


server.use(cookieParser('wdsdas'));
cookie
	req.secret = 'wdsdas';//签名(秘钥)  随便一个字符串   如果使用了 cookieParser了  里面就不用写这一行

	//res.cookie('user', 'tom', {path: '/abc', maxAge: 30*24*3600*1000})
	res.cookie('user', 'tom', {signed: true})

	console.log(req.cookies) //存的是没有签名的cookie
	console.log(req.signedCookies) //存 签名过的cookie   因cookie 容量过小 签过名会增大体积

	cookieParser : 只能做到签名 防止篡改
	cookieEncrypter : 专门用来加密

session

	1.写入
	2.读取
session劫持


cookie-session
 server.use(cookieParser())
 server.use(cookieSession({
	 name: 'sess',
	 keys: ['aaa','bbb','ccc'],
	 maxAge: 2*3600*1000  //session  越短用户安全越高。
 }))

delete req.session

res.session['xxxx']


---------------------------------------------------------------------
模板引擎：生成页面

jade- 破坏式、侵入式、强依赖

ejs - 温和、非侵入式、弱依赖


jade:
	html  -- <html></html>

	1. 根据缩进，规定层级

	2. 属性

		script(src="a.js",type="javascript")
		style 可以直接写属性，或 {} json语法  别的不行

		class 可以直接使用数组  别的不行

		div.box  div#box  id 和class 的简写

		另外一个写法
			div&attrbutes({title: 'aaa', id: 'box'})

	3.  a(href="www.baidu.com") 百度

	4. 内容空个格 
























//
